"""1- Implementa un algoritmo que itere sobre una tupla dada y la muestre por pantalla.

mi_tupla = (1, 2, 3, "cuatro", "cinco")"""


mi_tupla = (1, 2, 3, "cuatro", "cinco")


for elemento in mi_tupla:
    print(elemento)


#2- Devolver la longitud de la tupla anterior.


mi_tupla = (1, 2, 3, "cuatro", "cinco")


longitud = len(mi_tupla)


print("La longitud de la tupla es:", longitud)

#3- Indicar si los elementos “cuatro”, “2” y 2 están en la tupla anterior


mi_tupla = (1, 2, 3, "cuatro", "cinco")


elementos = ["cuatro", "2", 2]


for elemento in elementos:
    if elemento in mi_tupla:
        print(f"El elemento '{elemento}' está en la tupla.")
    else:
        print(f"El elemento '{elemento}' no está en la tupla.")


"""4- Igual que 3 pero que el valor a buscar sea leído por teclado.
Recuerda cuando usas input en Python, obtienes una cadena, sin importar si el usuario
ingresa un número o cualquier otro tipo de entrada. Por lo que es necesario distinguir si
lo que se ha introducido es, por ejemplo, un dígito (isdigit())
"""


mi_tupla = (1, 2, 3, "cuatro", "cinco")

valor = input("Introduce un valor para buscar en la tupla: ")

# Convertimos a entero si es un dígito
if valor.isdigit():
    valor = int(valor)


if valor in mi_tupla:
    print(f"El valor '{valor}' está en la tupla.")
else:
    print(f"El valor '{valor}' no está en la tupla.")

""5- Implementa en Python un algoritmo que reciba tres valores por teclado y los añade
a la tupla:

mi_tupla(x,y,z)
Imprime la tupla por pantalla."""


mi_tupla = (1, 2, 3, "cuatro", "cinco")


x = input("Introduce el primer valor: ")
y = input("Introduce el segundo valor: ")
z = input("Introduce el tercer valor: ")

# Creamos una nueva tupla añadiendo los valores ingresados
mi_tupla = mi_tupla + (x, y, z)


print("La tupla actualizada es:", mi_tupla)


"""6- Implementa un algoritmo que lea por teclado dos valores y los añada a una tupla
con el siguiente formato:
mi_tupla(a,x)

donde a es una letra y x un número.
Imprime la tupla."""


a = input("Introduce una letra: ")

# Verificamos que el usuario haya ingresado una sola letra
while not (a.isalpha() and len(a) == 1):
    a = input("Por favor, introduce una letra válida: ")


x = input("Introduce un número: ")

# Verificamos que el valor ingresado sea un número
while not x.isdigit():
    x = input("Por favor, introduce un número válido: ")

# Convertimos el número a un entero
x = int(x)

# Creamos la tupla
mi_tupla = (a, x)

# Mostramos la tupla
print("La tupla creada es:", mi_tupla)


"""7- Implementa, usando un bucle for, la tupla ahora tenga el par de valores (a,b),
de forma que:

mi_tupla=((a,x),(b,y),(c,z))

donde a,b,c son letras introducidas por teclado y x,y,z son números.
El resultado al imprimir la tupla deber ser del tipo:

el valor a vale x,
el valor b vale y,
el valor c vale z

¡¡Sustituyendo cada uno de ellos por el valor introducido por teclado!!"""


pares = []


for i in range(3):
    letra = input(f"Introduce la letra {i+1}: ")

    # Verificamos que sea una sola letra
    while not (letra.isalpha() and len(letra) == 1):
        letra = input("Por favor, introduce una letra válida: ")

    numero = input(f"Introduce el número {i+1} para la letra '{letra}': ")

    # Verificamos que sea un número
    while not numero.isdigit():
        numero = input("Por favor, introduce un número válido: ")

    
    numero = int(numero)

    # Añadimos el par (letra, número) a la lista
    pares.append((letra, numero))

# Convertimos la lista de pares a una tupla
mi_tupla = tuple(pares)

for letra, numero in mi_tupla:
    print(f"El valor {letra} vale {numero}.")



"""8- Desempaqueta el valor de cada respuesta almacenada en la tupla del ejercicio
anterior.
Desempaquetar significa sustituir el bucle for del ejercicio anterior que imprimía el
contenido de la tupla, por una función que utilice la siguiente sintaxis:

def desempaquetar_tupla(tupla):
(a, x), (b, y), (c, z) = tupla
print(f"El valor {a} vale {x}")
print(f"El valor {b} vale {y}")
print(f"El valor {c} vale {z}")

de forma que recibe una tupla e imprime por pantalla el contenido de cada par
de elementos que contiene la tupla."""


def desempaquetar_tupla(tupla):
    (a, x), (b, y), (c, z) = tupla
    print(f"El valor {a} vale {x}")
    print(f"El valor {b} vale {y}")
    print(f"El valor {c} vale {z}")


mi_tupla = (("a", 10), ("b", 20), ("c", 30))


desempaquetar_tupla(mi_tupla)


"""9- Implementa un algoritmo que reciba dos tuplas de cualquier tamaño con valores
enteros y realice las siguientes operaciones:
- Devuelve una nueva tupla con la intersección de elementos (aquellos elementos
comunes a ambas tuplas).
- Devuelve una nueva tupla con la diferencia de elementos de la primera tupla
con respecto a la segunda (aquellos elementos que están en una tupla pero no
la otra)
Ejemplo:

tupla1 = (1, 2, 3, 4, 5)
tupla2 = (3, 4, 5, 6, 7)
# Intersección: (3, 4, 5)
# Diferencia: (1,2,6,7)"""

tupla1 = (1, 2, 3, 4, 5)
tupla2 = (3, 4, 5, 6, 7)

# Calculamos la intersección usando conjuntos
interseccion = tuple(set(tupla1) & set(tupla2))

# Calculamos la diferencia simétrica (elementos únicos en ambas tuplas)
diferencia = tuple(set(tupla1) ^ set(tupla2))


print("Intersección:", interseccion)
print("Diferencia:", diferencia)


"""10. Dada una tupla de tuplas que contiene valores de distintas ciudades y sus
temperaturas en los últimos días, crea un programa que busque si una ciudad específica
está en la tupla y devuelva la media de todas las temperaturas registradas para esa
ciudad.
Ejemplo:
ciudades_temperaturas = (("Madrid", (30, 32, 31)), ("Barcelona", (20, 26, 21)), ("Valencia", (28, 29, 27)))
Barcelona -> 22,3"""


ciudades_temperaturas = (
    ("Madrid", (30, 32, 31)),
    ("Barcelona", (20, 26, 21)),
    ("Valencia", (28, 29, 27))
)

ciudad_buscada = input("Introduce el nombre de la ciudad: ")

# Buscamos la ciudad en la tupla
encontrada = False
for ciudad, temperaturas in ciudades_temperaturas:
    if ciudad.lower() == ciudad_buscada.lower():  # Comparamos sin distinguir entre mayúsculas y minúsculas
        encontrada = True
        media = sum(temperaturas) / len(temperaturas)
        print(f"La media de las temperaturas en {ciudad} es: {media:.1f}")
        break

if not encontrada:
    print(f"La ciudad '{ciudad_buscada}' no está en la lista.")


   """11. Crea de programa que genere contraseñas.
Para ello, deberás tener 3 tuplas de las que se cogerán los elementos que formarán las
contraseñas.
\ Tupla con dígitos: tupla que contiene los dígitos del 0 al 9
\ Tupla con letras: tupla que contiene las letras del abecedario (sin la letra ñ)
\ Tupla con caracteres especiales: tupla que contiene al menos 15 caracteres
especiales, los que consideresb(¡”$%&/()=......)
Especificaciones:
\ La contraseñas generadas deberán ser también tuplas.
\ Se generarán dos contraseñas, una fuerte y una débil.
\ El usuario decide por teclado la longitud de la contraseña, mínimo 8
caracteres y máximo 64.
\ La contraseña fuerte deberá tener una compensación aproximada según la
siguiente distribución:
- Un 20% de dígitos, un 40% de letras y un 40% de caracteres especiales.
\ La contraseña débil deberá tener una compensación aproximada según la
siguiente distribución:
- Un 80 % dígitos, un 15% letras y un 5% caracteres especiales."""

import random


digitos = tuple("0123456789")
letras = tuple("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ")
caracteres_especiales = tuple("!\"#$%&/()=?¡@#^*+,-.:;<>[]{}")

def generar_contraseña(longitud, distribucion):
    """
    Genera una contraseña basada en la longitud y distribución proporcionada.

    Args:
        longitud (int): Longitud de la contraseña.
        distribucion (dict): Diccionario con la proporción de cada tipo de carácter.

    Returns:
        tuple: Contraseña generada como una tupla.
    """
    cantidad_digitos = int(longitud * distribucion["digitos"])
    cantidad_letras = int(longitud * distribucion["letras"])
    cantidad_especiales = longitud - cantidad_digitos - cantidad_letras  # Lo que falta para completar la longitud

    # Seleccionamos caracteres aleatorios de cada tipo
    seleccion_digitos = random.choices(digitos, k=cantidad_digitos)
    seleccion_letras = random.choices(letras, k=cantidad_letras)
    seleccion_especiales = random.choices(caracteres_especiales, k=cantidad_especiales)

    # Combinamos los caracteres y los mezclamos
    contraseña = seleccion_digitos + seleccion_letras + seleccion_especiales
    random.shuffle(contraseña)

    return tuple(contraseña)


longitud = int(input("Introduce la longitud de la contraseña (entre 8 y 64): "))
while longitud < 8 or longitud > 64:
    longitud = int(input("Por favor, introduce un valor válido (entre 8 y 64): "))

# Generamos la contraseña fuerte
contraseña_fuerte = generar_contraseña(
    longitud,
    {"digitos": 0.2, "letras": 0.4, "especiales": 0.4}
)

# Generamos la contraseña débil
contraseña_debil = generar_contraseña(
    longitud,
    {"digitos": 0.8, "letras": 0.15, "especiales": 0.05}
)

# Mostramos las contraseñas generadas
print("\nContraseña fuerte generada:", contraseña_fuerte)
print("Contraseña débil generada:", contraseña_debil)
 

  